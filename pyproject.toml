[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dino"
version = "0.0.1"
authors = [
    { name = "Conrad Dobberstein" },
    { name = "Philipp von Mengersen" },
    { name = "Georgios Zountsas" },
]
description = 'Implementations of the DINO Framwork from "Emerging Properties in Self-Supervised Vision Transformers"'
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
keywords = ["knowledge distillation with no labels", "self-supervised learning", "deep learning", "computer vision"]
dependencies = [
    "hydra-core~=1.3.0",
    "matplotlib~=3.9.0",
    "numpy~=2.1.0",
    "timm~=1.0.0",
    "torch~=2.5.0",
    "torchvision~=0.20.0",
    "tqdm~=4.66.0",
]

[project.urls]
"Repository" = "https://github.com/dobbersc/dino"
"Paper" = "https://arxiv.org/abs/2104.14294"

[project.optional-dependencies]
dev = [
    "black~=24.10.0",
    "mypy~=1.13.0",
    "pytest~=8.3.0",
    "pytest-cov~=5.0.0",
    "ruff~=0.7.0",
]

[project.scripts]
dino = "dino.__main__:entry_point"

[tool.black]
line-length = 120
target-version = ["py310"]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

plugins = "numpy.typing.mypy_plugin"

[[tool.mypy.overrides]]
module = "timm.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "torchvision.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "--cov=dino --cov-config pyproject.toml"
testpaths = ["tests"]

[tool.coverage.report]
# Selection from https://coverage.readthedocs.io/en/stable/excluding.html#advanced-exclusion
exclude_also = [
    'def __repr__',
    'if TYPE_CHECKING:',
    '@(typing\.)?overload',
    '@(abc\.)?abstractmethod',
    'class .*\bProtocol\):',
]

[tool.jupytext]
formats = "ipynb,py:percent"

[tool.ruff]
target-version = "py310"
src = ["src", "tests"]
line-length = 120

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    # "C90",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    # "ANN",
    "ASYNC",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    # "CPY",
    "C4",
    "DTZ",
    "T10",
    # "DJ",
    "EM",
    "EXE",
    # "FA",
    "ISC",
    "ICN",
    "LOG",
    "G",
    "INP",
    "PIE",
    # "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "INT",
    "ARG",
    "PTH",
    # "TD",
    # "FIX",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "FLY",
    "NPY",
    "PERF",
    # "FURB",
    "RUF",
]

ignore = [
    "S101", # Do not remove assertions
    "S105", # Possible hardcoded password assigned (S105-S1007)
    "S106",
    "S107",
    "S311", # Checks for uses of cryptographically weak pseudo-random number generators
    "D100", # Don't force presence of docstrings (D100-D107)
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D107",
    "PLR0913", # Too many arguments in function definition
]

unfixable = [
    "ERA", # Do not delete commented code
    "EXE001", # Do not check python files for executability, doesn't work well on windows
    "EXE002", # Do not check python files for executability, doesn't work well on windows
    "F841", # Do not remove unused variables automatically
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
forced-separate = ["dino", "tests"]
